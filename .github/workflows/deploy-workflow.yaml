name: Default deploy workflow
on:
  workflow_call:
    inputs:
      app-path:
        required: true
        type: string
      stage:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ inputs.app-path }}
    steps:
      - name: Check out the codes
        uses: actions/checkout@v3
      - name: Print Test
        run: |
          echo "input working-directory :  ${{ inputs.app-path }}"
          echo "branch : ${GITHUB_REF##*/}"

#      - name: Configure Stage AWS credentials
#        if: ${{ inputs.stage == 'staging' }}
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Configure Prod AWS credentials
#        if: ${{ inputs.stage == 'prod' }}
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Get full python version
        id: full-python-version
        run: |
          python -c "import sys; print('::set-output name=version::' + '-'.join(map(str, sys.version_info)))"
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          installer-parallel: true
      - name: Install python packages
        run: |
          poetry install --no-root
      - name: Check basic lint
        run: |
          poetry run black --check --fast .
          poetry run flake8 --config=setup.cfg .
      - name: Check if requirements.txt is updated
        run: |
          poetry export --format requirements.txt --without-hashes | cut -f 1 -d ';' > requirements_from_poetry.txt
          diff -c requirements_from_poetry.txt requirements.txt
      - name: Run Pytest
        run: poetry run pytest
      - name: Deploy lambda
        run: |
          chalice local --stage "${{ inputs.stage }}" --port=8000
          curl http://localhost:8000
#
#      - name: Install Poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
#      - uses: actions/setup-python@v4
#        with:
#          cache: 'poetry'
#      - run: poetry install
#
#      - name: Deploy Lambda
#        env:
#          STAGE: ${{ steps.set-lambda-config.outputs.STAGE }}
#        run: |
#          ./deploy.sh ${STAGE}
