name: Default deploy workflow
on:
  workflow_call:
    inputs:
      app-path:
        required: true
        type: string
      stage:
        required: true
        type: string

jobs:
  versioning:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: ${{ inputs.app-path }}

    steps:
      - name: Check out the codes
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install semver
        run: |
          npm install --global semver

      - name: Get application name
        id: get-application-name
        run: |
          APP_NAME=$(awk -F'[ ="]+' '$1 == "name" { print $2 }' pyproject.toml | head -1)
          echo "APP_NAME :: ${APP_NAME}"
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_OUTPUT

      - name: Get the current version
        id: get-current-version
        run: |
          CURRENT_VERSION=$(git tag | grep ${{ steps.get-application-name.outputs.APP_NAME }}  | sort -Vr | head -1 | cut -d "/" -f 2)
          echo "CURRENT_VERSION :: ${CURRENT_VERSION}"
          if [ -z ${CURRENT_VERSION} ]; then
            CURRENT_VERSION="1.0.0"
          fi
          echo "CURRENT_VERSION2222 :: ${CURRENT_VERSION}"
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Get the bumped version
        id: get-bumped-version
        env:
          CURRENT_VERSION: ${{ steps.get-current-version.outputs.CURRENT_VERSION }}
        run: |
          BUMPED_VERSION=$(semver --increment minor ${CURRENT_VERSION})
          echo "BUMPED_VERSION=${BUMPED_VERSION}" >> $GITHUB_OUTPUT

      - name: Update the version related files
        env:
          CURRENT_VERSION: ${{ steps.get-current-version.outputs.CURRENT_VERSION }}
          BUMPED_VERSION: ${{ steps.get-bumped-version.outputs.BUMPED_VERSION }}
        run: |
          echo "${BUMPED_VERSION}" > ./.release/version
          if [[ "${GITHUB_REF##*/}" == "master" ]] ; then
            sed -i "s/version = \"${CURRENT_VERSION}\"/version = \"${BUMPED_VERSION}\"/" pyproject.toml
            echo "application production release version update"
          fi

      - name: Commit, Tag and Push
        uses: EndBug/add-and-commit@v7
        with:
          message: Bump the version from ${{ steps.get-current-version.outputs.CURRENT_VERSION}} to ${{ steps.get-bumped-version.outputs.BUMPED_VERSION}}
          add: '["${{ inputs.app-path }}/.release/version", "${{ inputs.app-path }}/pyproject.toml"]'
          pathspec_error_handling: exitImmediately
          tag: "${{ steps.get-application-name.outputs.APP_NAME }}/${{ steps.get-bumped-version.outputs.BUMPED_VERSION}}"
          push: true

  deploy:
    runs-on: ubuntu-20.04
#    needs: [versioning]
    defaults:
      run:
        working-directory: ${{ inputs.app-path }}
    steps:
      - name: Check out the codes
        uses: actions/checkout@v3
      - name: Print Test
        run: |
          echo "input working-directory :  ${{ inputs.app-path }}"
          echo "branch : ${GITHUB_REF##*/}"

#      - name: Configure Stage AWS credentials
#        if: ${{ inputs.stage == 'staging' }}
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Configure Prod AWS credentials
#        if: ${{ inputs.stage == 'prod' }}
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Get full python version
        id: full-python-version
        run: |
          python -c "import sys; print('::set-output name=version::' + '-'.join(map(str, sys.version_info)))"
#      - name: Install poetry
#        uses: snok/install-poetry@v1
#        with:
#          version: 1.4.2
#          installer-parallel: true
#          virtualenvs-in-project: false
#          virtualenvs-path: ~/.venv
#      - name: Cache poetry virtualenv
#        uses: actions/cache@v1
#        id: cache
#        with:
#          path: ~/.venv
#          key: poetry-${{ steps.full-python-version.outputs.version }}-${{ hashFiles(inputs.app-path) }}
#      - name: Install python packages
#        run: |
#          poetry install --no-root
#        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
      - uses: actions/setup-python@v4
        with:
          cache: 'poetry'
      - run: poetry install
      - name: Lint
        run: |
          poetry run black --check --fast --preview .
          poetry run flake8 --config=setup.cfg .
          poetry run isort --check-only .
      - name: Check if requirements.txt is updated
        run: |
          poetry export --format requirements.txt --without-hashes | cut -f 1 -d ';' > requirements_from_poetry.txt
          diff -c requirements_from_poetry.txt requirements.txt
      - name: Run Pytest
        run: poetry run pytest
      - name: Deploy lambda
        run: |
          ls -altr
          source .venv/bin/activate
          chalice local --stage "${{ inputs.stage }}" --port=8000
          curl http://localhost:8000
#
#      - name: Install Poetry
#        run: |
#          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
#      - uses: actions/setup-python@v4
#        with:
#          cache: 'poetry'
#      - run: poetry install
#
#      - name: Deploy Lambda
#        env:
#          STAGE: ${{ steps.set-lambda-config.outputs.STAGE }}
#        run: |
#          ./deploy.sh ${STAGE}

